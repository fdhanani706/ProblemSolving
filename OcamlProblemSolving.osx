let mean lst =
  let sum = List.fold_left ( + ) 0 lst in
  float_of_int sum /. float_of_int (List.length lst)

let median lst =
  let sorted = List.sort compare lst in
  let len = List.length sorted in
  if len mod 2 = 0 then
    let mid1 = List.nth sorted (len / 2 - 1) in
    let mid2 = List.nth sorted (len / 2) in
    float_of_int (mid1 + mid2) /. 2.0
  else
    float_of_int (List.nth sorted (len / 2))

let mode lst =
  let freq_map =
    List.fold_left (fun acc x ->
      let count = try List.assoc x acc with Not_found -> 0 in
      (x, count + 1) :: List.remove_assoc x acc
    ) [] lst in
  let max_freq = List.fold_left (fun acc (_, f) -> max acc f) 0 freq_map in
  let modes = List.fold_left (fun acc (n, f) ->
    if f = max_freq && f > 1 then n :: acc else acc
  ) [] freq_map in
  match modes with
  | [] -> print_endline "No mode"
  | _ -> print_string "Mode: "; List.iter (Printf.printf "%d ") (List.rev modes); print_newline ()

let () =
  let data = [1; 3; 3; 6; 7; 8; 9] in
  Printf.printf "Mean: %.2f\n" (mean data);
  Printf.printf "Median: %.2f\n" (median data);
  mode data
